Regularization Path of Cross-Validation Error Lower Bounds
Atsushi Shibagaki, Yoshiki Suzuki, Masayuki Karasuyama, and Ichiro Takeuchi Nagoya Institute of Technology Nagoya, 466-8555, Japan
{shibagaki.a.mllab.nit,suzuki.mllab.nit}@gmail.com {karasuyama,takeuchi.ichiro}@nitech.ac.jp
Abstract
Careful tuning of a regularization parameter is indispensable in many machine learning tasks because it has a significant impact on generalization performances. Nevertheless, current practice of regularization parameter tuning is more of an art than a science, e.g., it is hard to tell how many grid-points would be needed in cross-validation (CV) for obtaining a solution with sufficiently small CV error. In this paper we propose a novel framework for computing a lower bound of the CV errors as a function of the regularization parameter, which we call regularization path of CV error lower bounds. The proposed framework can be used for providing a theoretical approximation guarantee on a set of solutions in the sense that how far the CV error of the current best solution could be away from best possible CV error in the entire range of the regularization parameters. Our numerical experiments demonstrate that a theoretically guaranteed choice of a regularization parameter in the above sense is possible with reasonable computational costs.
1 Introduction
Many machine learning tasks involve careful tuning of a regularization parameter that controls the balance between an empirical loss term and a regularization term. A regularization parameter is usually selected by comparing the cross-validation (CV) errors at several different regularization parameters. Although its choice has a significant impact on the generalization performances, the current practice is still more of an art than a science. For example, in commonly used grid-search, it is hard to tell how many grid points we should search over for obtaining sufficiently small CV error. In this paper we introduce a novel framework for a class of regularized binary classification problems that can compute a regularization path of CV error lower bounds. For an   [0, 1], we define approximate regularization parameters to be a set of regularization parameters such that the CV error of the solution at the regularization parameter is guaranteed to be no greater by  than the best possible CV error in the entire range of regularization parameters. Given a set of solutions obtained, for example, by grid-search, the proposed framework allows us to provide a theoretical guarantee of the current best solution by explicitly quantifying its approximation level  in the above sense. Furthermore, when a desired approximation level  is specified, the proposed framework can be used for efficiently finding one of the -approximate regularization parameters. The proposed framework is built on a novel CV error lower bound represented as a function of the regularization parameter, and this is why we call it as a regularization path of CV error lower bounds. Our CV error lower bound can be computed by only using a finite number of solutions obtained by arbitrary algorithms. It is thus easy to apply our framework to common regularization parameter tuning strategies such as grid-search or Bayesian optimization. Furthermore, the proposed framework can be used not only with exact optimal solutions but also with sufficiently good approximate solu-
1

Figure 1: An illustration of the proposed framework. One of our algorithms presented in 4 automatically selected 39 regularization parameter values in [10-3, 103], and an upper bound of the validation error for each of them is obtained by solving an optimization problem approximately. Among those 39 values, the one with the smallest validation error upper bound (indicated as  at C = 1.368) is guaranteed to be (= 0.1) approximate regularization parameter in the sense that the validation error for the regularization parameter is no greater by  than the smallest possible validation error in the whole interval [10-3, 103]. See 5 for the setup (see also Figure 3 for the results with other options). tions, which is computationally advantageous because completely solving an optimization problem is often much more costly than obtaining a reasonably good approximate solution. Our main contribution in this paper is to show that a theoretically guaranteed choice of a regularization parameter in the above sense is possible with reasonable computational costs. To the best of our knowledge, there is no other existing methods for providing such a theoretical guarantee on CV error that can be used as generally as ours. Figure 1 illustrates the behavior of the algorithm for obtaining  = 0.1 approximate regularization parameter (see 5 for the setup). Related works Optimal regularization parameter can be found if its exact regularization path can be computed. Exact regularization path has been intensively studied [1, 2], but they are known to be numerically unstable and do not scale well. Furthermore, exact regularization path can be computed only for a limited class of problems whose solutions are written as piecewise-linear functions of the regularization parameter [3]. Our framework is much more efficient and can be applied to wider classes of problems whose exact regularization path cannot be computed. This work was motivated by recent studies on approximate regularization path [4, 5, 6, 7]. These approximate regularization paths have a property that the objective function value at each regularization parameter value is no greater by  than the optimal objective function value in the entire range of regularization parameters. Although these algorithms are much more stable and efficient than exact ones, for the task of tuning a regularization parameter, our interest is not in objective function values but in CV errors. Our approach is more suitable for regularization parameter tuning tasks in the sense that the approximation quality is guaranteed in terms of CV error. As illustrated in Figure 1, we only compute a finite number of solutions, but still provide approximation guarantee in the whole interval of the regularization parameter. To ensure such a property, we need a novel CV error lower bound that is sufficiently tight and represented as a monotonic function of the regularization parameter. Although several CV error bounds (mostly for leave-one-out CV) of SVM and other similar learning frameworks exist (e.g., [8, 9, 10, 11]), none of them satisfy the above required properties. The idea of our CV error bound is inspired from recent studies on safe screening [12, 13, 14, 15, 16] (see Appendix A for the detail). Furthermore, we emphasize that our contribution is not in presenting a new generalization error bound, but in introducing a practical framework for providing a theoretical guarantee on the choice of a regularization parameter. Although generalization error bounds such as structural risk minimization [17] might be used for a rough tuning of a regularization parameter, they are known to be too loose to use as an alternative to CV (see, e.g., 11 in [18]). We also note that our contribution is not in presenting new method for regularization parameter tuning such as Bayesian optimization [19], random search [20] and gradient-based search [21]. As we demonstrate in experiments, our approach can provide a theoretical approximation guarantee of the regularization parameter selected by these existing methods.
2 Problem Setup
We consider linear binary classification problems. Let {(xi, yi)  Rd x{-1, 1}}i[n] be the training set where n is the size of the training set, d is the input dimension, and [n] := {1, . . . , n}. An independent held-out validation set with size n is denoted similarly as {(xi, yi)  Rd x {-1, 1}}i[n]. A linear decision function is written as f (x) = wx, where w  Rd is a vector of coefficients, and  represents the transpose. We assume the availability of a held-out validation set only for simplifying the exposition. All the proposed methods presented in this paper can be straightforwardly
2

adapted to a cross-validation setup. Furthermore, the proposed methods can be kernelized if the loss function satisfies a certain condition. In this paper we focus on the following class of regularized convex loss minimization problems:

wC

:=

arg min
wRd

1 2

w2

+

C

(yi, wxi),

i[n]

(1)

where C > 0 is the regularization parameter, and  *  is the Euclidean norm. The loss function is

denoted as  : {-1, 1} x R  R. We assume that (*, *) is convex and subdifferentiable in the 2nd

argument. Examples of such loss functions include logistic loss, hinge loss, Huber-hinge loss, etc.

For notational convenience, we denote the individual loss as i(w) := (yi, wxi) for all i  [n].

The optimal solution for the regularization parameter C is the regularization parameter is defined in a finite interval

explicitly [C, Cu],

denoted e.g., C

as =

1w0C-.3WanedasCsuum=e

that 103

as we did in the experiments.

For a solution w  Rd, the validation error1 is defined as

Ev (w)

:=

1 n

I(yiwxi < 0),

i[n ]

(2)

where I(*) is the indicator function. In this paper, we consider two problem setups. The first prob-

lreemgulsaertiuzpatiiso,ngpivaeranmaesteertsoCf 1(e, i.t.h.e,rCoTptim[aCl o,rCaup]p,rtooxcimomatpeu)tseotlhuetiaopnpsrwoxCi1m,a.t.i.o,nwleCvTelat

T different such that

Ct{Cm1i,n...,CETv}(wC t ) - Ev  ,

where

Ev

:=
C

min Ev
[Cl ,Cu ]

(wC

),

(3)

by which we can find how accurate our search (grid-search, typically) is in a sense of the deviation

of the setup

iasc, hgiievveendthvealaidpaptriooxnimerarotirofnrolemvetlhe,trtouefimndinainmu-mapipnrothxeimraanteger,egi.uel.,arEizva.tiTonhepsaeracmonedteprrwobitlhemin

an interval C  [Cl, Cu], which is defined as an element of the following set

C() := C  [Cl, Cu] Ev(wC ) - Ev   .

Our goal in this second setup is to derive an efficient exploration procedure which achieves the specified validation approximation level . These two problem setups are both common scenarios in practical data analysis, and can be solved by using our proposed framework for computing a path of validation error lower bounds.

3 Validation error lower bounds as a function of regularization parameter

In this section, we derive a validation error lower bound which is represented as a function of the regularization parameter C. Our basic idea is to compute a lower and an upper bound of the inner product score wCxi for each validation input xi, i  [n], as a function of the regularization parameter C. For computing the bounds of wCxi, we use a solution (either optimal or approximate) for a different regularization parameter C = C.

3.1 Score bounds

We first describe how to obtain a lower and an upper bound of inner product score wCxi based on an approximate solution wC at a different regularization parameter C = C. Lemma 1. Let wC be an approximate solution of the problem (1) for a regularization parameter value C and i(wC ) be a subgradient of i at w = wC such that a subgradient of the objective function is

g(wC ) := wC + C

i(wC ).

i[n]

(4)

1 For simplicity, we regard a validation instance whose score is exactly zero, i.e., wxi = 0, is correctly classified in (2). Hereafter, we assume that there are no validation instances whose input vector is completely 0, i.e., xi = 0, because those instances are always correctly classified according to the definition in (2).

3

Then, for any C > 0, the score wCxi, i  [n], satisfies

wCxi  LB(wCxi|wC ) :=

(wC , -(wC ,

xi) xi)

- +

1 C 1 C

((wC , ((wC ,

xi) xi)

+ +

(g(wC ), xi))C, if (g(wC ), xi))C, if

C C

> <

C, C,

(5a)

wCxi  U B(wCxi|wC ) :=

-(wC , (wC ,

xi) xi)

+ -

1 C 1 C

((wC , ((wC ,

xi) xi)

+ +

(g(wC ), xi))C, if (g(wC ), xi))C, if

C C

> <

C, C,

(5b)

where

(wC , xi)

:=

1 2

(wC

xi



+

wCxi)



0,

(g(wC ), xi)

:=

1 2

(g(wC

)xi



+

g(wC )xi)



0,

(wC , xi)

:=

1 2

(wC

xi

- wCxi)



0,

(g(wC ), xi)

:=

1 2

(g(wC

)xi

- g(wC )xi)



0.

The proof is presented in Appendix A. Lemma 1 tells that we have a lower and an upper bound of the

sWscuochhreenthwwaCtCgx(iswiofCop)rti=meaac0lh,,

validation instance that linearly change with the regularization parameter C. it can be shown that (see Proposition B.24 in [22]) there exists a subgradient meaning that the bounds are tight because (g(wC ), xi) = (g(wC ), xi) = 0.

Corollary 2. itself satisfies

When

C

=

C,

the

score

wCxi, i



[n],

for

the

regularization

parameter

value

C

wCxi LB(wCxi|wC ) = wC xi -(g(wC ), xi), wCxi  U B(wCxi|wC ) = wC xi +(g(wC ), xi).

The results in Corollary 2 are obtained by simply substituting C = C into (5a) and (5b).

3.2 Validation Error Bounds

Given a lower and an upper bound of the score of each validation instance, a lower bound of the validation error can be computed by simply using the following facts:

yi = +1 and U B(wCxi|wC ) < 0  mis-classified,

(6a)

yi = -1 and LB(wCxi|wC ) > 0  mis-classified.

(6b)

Furthermore, since the bounds in Lemma 1 linearly change with the regularization parameter C, we

can identify the interval of C within which the validation instance is guaranteed to be mis-classified.

Lemma 3. For a validation instance with yi = +1, if

C

<

C

<

(wC

,

(wC , xi) xi) + (g(wC

),

xi)

C

or

(wC ,

(wC , xi) xi) + (g(wC

),

xi)

C

<

C

<

C,

then the -1, if

validation

instance

(xi, yi)

is

mis-classified.

Similarly,

for

a

validation

instance

with

yi

=

C

<

C

<



(wC

,

(wC , xi) xi) + (g(wC

),

xi

)

C

or

(wC

,

(wC , xi) xi) + (g(wC

),

xi)

C

<

C

<

C,

then the validation instance (xi, yi) is mis-classified.

This lemma can be easily shown by applying (5) to (6).

As a direct consequence of Lemma 3, the lower bound of the validation error is represented as a function of the regularization parameter C in the following form.

Theorem 4. Using an approximate solution error Ev(wC ) for any C > 0 satisfies

wC

for

a

regularization

parameter

C,

the

validation

Ev(wC )  LB(Ev(wC )|wC ) :=

(7)

1 n

I
yi =+1

C<C<(wC

,

(wC , xi) xi)+(g(wC

),

xi

)

C

+I
yi =+1



(wC

,

(wC , xi) xi)+(g(wC

),

xi)

C<C<C

+I
yi =-1

C<C<



(wC

,

(wC , xi) xi)+(g(wC

),

xi)

C

+I
yi =-1

(wC

,

(wC , xi) xi)+(g(wC

),

xi

)

C<C<C

.

4

Algorithm 1: Computing the approximation level  from the given set of solutions Input: {(xi, yi)}i[n], {(xi, yi)}i[n], Cl, Cu, W := {wC1 , . . . , wCT } 1: Evbest  minCt{C1,...,CT } U B(Ev(wCt )|wCt ) 2: LB(Ev)  minc[Cl,Cu] maxCt{C1,...,CT } LB(Ev(wc)|wCt ) Output:  = Evbest - LB(Ev)

The lower bound (7) is a staircase function of the regularization parameter C. Remark 5. We note that our validation error lower bound is inspired from recent studies on safe screening [12, 13, 14, 15, 16], which identifies sparsity of the optimal solutions before solving the optimization problem. A key technique used in those studies is to bound Lagrange multipliers at the optimal, and we utilize this technique to prove Lemma 1, which is a core of our framework.

By setting C = C, we can obtain a lower and an upper bound of the validation error for the regularization parameter C itself, which are used in the algorithm as a stopping criteria for obtaining an approximate solution wC . Corollary 6. Given an approximate solution wC, the validation error Ev(wC) satisfies
Ev(wC )  LB(Ev(wC )|wC )

=

1 n

I wC xi + (g(wC ), xi) < 0 +

I wC xi - (g(wC ), xi) > 0

yi =+1

yi =-1

Ev(wC )  U B(Ev(wC )|wC )

,

(8a)

=

1

-

1 n

I wC xi - (g(wC ), xi)  0 +

I wC xi + (g(wC ), xi)  0

yi =+1

yi =-1

. (8b)

4 Algorithm

In this section we present two algorithms for each of the two problems discussed in 2. Due to the space limitation, we roughly describe the most fundamental forms of these algorithms. Details and several extensions of the algorithms are presented in supplementary appendices B and C.

4.1 Problem setup 1: Computing the approximation level  from a given set of solutions

Given a set grid-search,

of (either optimal our first problem

or approximate) solutions is to provide a theoretical

wC1 , . . . , wCT approximation

, obtained level  in

e.g., by ordinary the sense of (3)2.

This problem can be solved easily by using the validation error lower bounds developed in 3.2. The

algorithm is line 1, and a 2. Then, the

aploprewpsreeornxtbiemoduaintnidoAnolflgetovhreeiltbhemcsta1np,obwseshisebirmleepwvlayeliocdobamttaioipnnuetederbrthoyersEcuubvrtrr:ea=ncttmibneginsttChvea[llCaidt,taCetruio]fnrEoevmr(rwothrCeE)fvoibnremsltienirne.

Wlowe enrobteouthnadtsLLBB((EEvv)(,wthCe)l|owwCetr),btou=nd1,o.f.

Ev, .,T

can be easily computed by , because they are staircase

using T evaluation functions of C.

error

4.2 Problem setup 2: Finding an -approximate regularization parameter

Given a desired approximation level  such as  = 0.01, our second problem is to find an -

approximate regularization parameter. To this end we develop an algorithm that produces a set of

optimal or approximate solutions then approximation level would

bweCs1m, .a.ll.e,rwthCaTnsourcheqthuaatl,

if to

we .

apply Algorithm 1 to this sequence, Algorithm 2 is the pseudo-code of

this algorithm. It computes approximate solutions for an increasing sequence of regularization pa-

rameters in the main loop (lines 2-11).

the

2 When l.h.s. of

we (3)

only have should be

approximate solutions wC1 , . . . , minCt{C1,...,CT } U B(Ev (wCt

wCT , )|wCt

Eq. ).

(3)

is

slightly

incorrect.

The

first

term

of

5

Let us now consider tth iteration in the main

Algorithm 2: Finding an  approximate regularization parameter with approximate solutions Input: {(xi, yi)}i[n], {(xi, yi)}i[n], Cl, Cu, 

loop, where we have already computed t-1 approximate solutions wC1 , . . . , wCt-1 for C1 < . . . < Ct-1. At this point,

1: t  1, Ct  Cl, Cbest  Cl, Evbest  1

2: 3: 4:
5:

whwCifiCloeUtmCBptsu(oEtelvvUC(ewuB(1Cd()tEo)a|pvw(pCwrotCx)ti<)m|waEtCevbtley)stbfoytrh(eC8nb=).Ct

6: Evbest  U B(Ev(wCt )|wCt )

7: Cbest  Ct

8: end if

9: Set Ct+1 by (10)

C best

:=

arg min
C {C1,...,Ct-1

}

U

B

(Ev

(wC

)|wC

),

is the best (in worst-case) regularization parameter obtained so far and it is guaranteed to be an -approximate regularization parameter in the interval [Cl,Ct] in the sense that the validation error,

Evbest

:=

min
C {C1,...,Ct-1}

U B(Ev(wC )|wC ),

10: t  t + 1 11: end while Output: Cbest  C().

is shown to be at most greater by  than the smallest possible validation error in the interval [Cl, Ct]. However, we are not sure whether Cbest can still keep -approximation property

for C > Ct. Thus, in line 3, we approx-

imately solve the optimization problem (1) at C = Ct and obtain an approximate solution

wUCBt(. ENv (owteCth)a|twtChe)a-ppLroBx(imEavt(ewsColu)|twioCn

w)Cist

must be sufficiently good enough in the sense sufficiently smaller than  (typically 0.1). If the

that up-

per bound of the validation error U B(Ev(wC )|wC ) is smaller than Evbest, we update Evbest and

Cbest (lines 5-8).

Our next task is to find Ct+1 in such a way that Cbest is an -approximate regularization parameter in the interval [Cl, Ct+1]. Using the validation error lower bound in Theorem 4, the task is to find the smallest Ct+1 > Ct that violates

Evbest - LB(Ev(wC )|wCt )  , C  [Ct, Cu],

(9)

In order to formulate such a Ct+1, let us define

P := {i  [n]|yi = +1, U B(wCt xi|wCt ) < 0}, N := {i  [n]|yi = -1, LB(wCt xi|wCt ) > 0}. Furthermore, let

 :=

(wCt

,

(wCt , xi) xi) + (g(wCt

),

xi

)

Ct


iP



(wCt

,

(wCt , xi) xi) + (g(wCt

),

xi)

Ct

,
iN

and denote the kth-smallest element of  as kth() for any natural number k. Then, the smallest Ct+1 > Ct that violates (9) is given as

Ct+1  (n(LB(Ev(wCt )|wCt )-Evbest +)+1)th().

(10)

5 Experiments
In this section we present experiments for illustrating the proposed methods. Table 2 summarizes the datasets used in the experiments. They are taken from libsvm dataset repository [23]. All the input features except D9 and D10 were standardized to [-1, 1]3. For illustrative results, the instances were randomly divided into a training and a validation sets in roughly equal sizes. For quantitative results, we used 10-fold CV. We used Huber hinge loss (e.g., [24]) which is convex and subdifferentiable with respect to the second argument. The proposed methods are free from the choice of optimization solvers. In the experiments, we used an optimization solver described in [25], which is also implemented in well-known liblinear software [26]. Our slightly modified code
3 We use D9 and D10 as they are for exploiting sparsity.

6

liver-disorders (D2)

ionosphere (D3)

australian (D4)

Figure 2: Illustrations of Algorithm 1 on three benchmark datasets (D2, D3, D4). The plots indicate how the approximation level  improves as the number of solutions T increases in grid-search (red), Bayesian optimization (blue) and our own method (green, see the main text).

(a)  = 0.1 without tricks

(b)  = 0.05 without tricks

(c)  = 0.05 with tricks 1 and 2

Figure 3: Illustrations of Algorithm 2 on ionosphere (D3) dataset for (a) op2 with  = 0.10, (b) op2 with  = 0.05 and (c) op3 with  = 0.05, respectively. Figure 1 also shows the result for op3 with  = 0.10.

(for adaptation to Huber hinge loss) is provided as a supplementary material, and is also available on https://github.com/takeuchi-lab/RPCVELB. Whenever possible, we used warmstart approach, i.e., when we trained a new solution, we used the closest solutions trained so far (either approximate or optimal ones) as the initial starting point of the optimizer. All the computations were conducted by using a single core of an HP workstation Z800 (Xeon(R) CPU X5675 (3.07GHz), 48GB MEM). In all the experiments, we set C = 10-3 and Cu = 103. Results on problem 1 We applied Algorithm 1 in 4 to a set of solutions obtained by 1) gridsearch, 2) Bayesian optimization (BO) with expected improvement acquisition function, and 3) adaptive search with our framework which sequentially computes a solution whose validation lower bound is smallest based on the information obtained so far. Figure 2 illustrates the results on three datasets, where we see how the approximation level  in the vertical axis changes as the number of solutions (T in our notation) increases. In grid-search, as we increase the grid points, the approximation level  tends to be improved. Since BO tends to focus on a small region of the regularization parameter, it was difficult to tightly bound the approximation level. We see that the adaptive search, using our framework straightforwardly, seems to offer slight improvement from grid-search. Results on problem 2 We applied Algorithm 2 to benchmark datasets for demonstrating theoretically guaranteed choice of a regularization parameter is possible with reasonable computational costs. Besides the algorithm presented in 4, we also tested a variant described in supplementary Appendix B. Specifically, we have three algorithm options. In the first option (op1), we used optwsipmeeeaindl s-sutoeplaudttriiuocsnkessd{dawepsCpcrtroi}bxteimd[Tai]ntefsosuroplcpuoltemiompneusnt{itnawgryCCtA}Vtppe[eTrnr]o.driIxnloBtwh.eeWrlaebsotcuoonnpdstsiiod. nerIe(nodpthf3oe)u, srwedceiofafneddrdeiontpitotcinohanolliy(coeupss2eo)df,   {0.1, 0.05, 0.01, 0}. Note that  = 0 indicates the task of finding the exactly optimal regular-
7

Table 1: Computational costs. For each of the three options and   {0.10, 0.05, 0.01, 0}, the number of optimization problems solved (denoted as T ) and the total computational costs (denoted as time) are listed. Note that, for op2, there are no results for  = 0.

op1 op2 op3



(using T

wCti)me (sec)

(using wC )

T

time (sec)

(using tricks)

T

time (sec)

op1

(using T

wCt)ime (sec)

op2

(using wC )

T

time (sec)

op3 (using tricks)

T

time (sec)

0.10

0.05 0.01

D1

0

30 0.068 68 0.124 234 0.428 442 0.697

32 0.031 70 0.061 324 0.194
N.A.

33 0.041

57 205

0.057 0.157

D6

383 0.629

92 207 1042 4276

1.916 4.099 16.31 57.57

93 0.975 209 2.065 1069 9.686
N.A.

62 123 728 2840

0.628 1.136 5.362 44.68

0.10 221 0.177

0.05 0.01

D2

534 1503

0.385 0.916

0 10939 6.387

223 0.124 540 0.290 2183 0.825
N.A.

131 0.084

289

367 1239

0.218 0.623

D7

601 2532

6275 3.805

67490

8.492 16.18 57.79 1135

293 5.278 605 9.806 2788 35.21
N.A.

167 379 1735 42135

3.319 6.604 24.04 760.8

0.10 61 0.617

0.05 0.01

D3

123 1.073 600 4.776

0 5412 26.39

62 0.266 129 0.468 778 0.716
N.A.

43 0.277

72

73 270

0.359 0.940

D8

192 1063

815 6.344

34920

0.761 1.687 8.257 218.4

74 0.604 195 1.162 1065 6.238
N.A.

66 110 614 15218

0.606 0.926 4.043 99.57

0.10

0.05 0.01

D4

0

27 0.169 64 0.342 167 0.786 342 1.317

27 0.088 65 0.173 181 0.418
N.A.

23 0.093

134 360.2

47 156

0.153 0.399

D9

317 1791

569.9 2901

345 1.205

85427 106937

136 201.0

323 280.7

1822

1345

N.A.

89 200 1164 63300

74.37 128.5 657.4 98631

0.10 62 0.236

0.05 0.01

D5

108 0.417 421 1.201

0 2330 4.540

63 0.108 109 0.171 440 0.631
N.A.

45 0.091

77 258

0.137 0.401

D10

Ev < 0.10 Ev < 0.05 157 81.75

968 2.451

258552

85610

Ev < 0.10 Ev < 0.05 162 31.02
N.A.

Ev < 0.10 Ev < 0.05 114 36.81 42040 23316

ization parameter. In some datasets, the smallest validation errors are less than 0.1 or 0.05, in which cases we do not report the results (indicated as "Ev < 0.05" etc.). In trick1, we initially computed solutions at four different regularization parameter values evenly allocated in [10-3, 103] in the logarithmic scale. In trick2, the next regularization parameter Ct+1 was set by replacing  in (10) with 1.5 (see supplementary Appendix B). For the purpose of illustration, we plot examples of validation error curves in several setups. Figure 3 shows the validation error curves of ionosphere (D3) dataset for several options and . Table 1 shows the number of optimization problems solved in the algorithm (denoted as T ), and the total computation time in CV setups. The computational costs mostly depend on T , which gets smaller as  increases. Two tricks in supplementary Appendix B was effective in most cases for reducing T . In addition, we see the advantage of using approximate solutions by comparing the computation times of op1 and op2 (though this strategy is only for  = 0). Overall, the results suggest that the proposed algorithm allows us to find theoretically guaranteed approximate regularization parameters with reasonable costs except for  = 0 cases. For example, the algorithm found an  = 0.01 approximate regularization parameter within a minute in 10-fold CV for a dataset with more than 50000 instances (see the results on D10 for  = 0.01 with op2 and op3 in Table 1).

Table 2: Benchmark datasets used in the experiments.

dataset name

sample size input dimension

dataset name

sample size input dimension

D1 heart D2 liver-disorders D3 ionosphere D4 australian D5 diabetes

270 345 351 690 768

13 D6 german.numer 1000

6 D7 svmguide3

1284

34 D8 svmguide1

7089

14 D9

a1a

32561

8 D10

w8a

64700

24 21
4 123 300

6 Conclusions and future works

We presented a novel algorithmic framework for computing CV error lower bounds as a function of the regularization parameter. The proposed framework can be used for a theoretically guaranteed choice of a regularization parameter. Additional advantage of this framework is that we only need to compute a set of sufficiently good approximate solutions for obtaining such a theoretical guarantee, which is computationally advantageous. As demonstrated in the experiments, our algorithm is practical in the sense that the computational cost is reasonable as long as the approximation quality  is not too close to 0. An important future work is to extend the approach to multiple hyper-parameters tuning setups.

8

References
[1] B. Efron, T. Hastie, I. Johnstone, and R. TIbshirani. Least angle regression. Annals of Statistics, 32(2):407-499, 2004.
[2] T. Hastie, S. Rosset, R. Tibshirani, and J. Zhu. The entire regularization path for the support vector machine. Journal of Machine Learning Research, 5:1391-1415, 2004.
[3] S. Rosset and J. Zhu. Piecewise linear regularized solution paths. Annals of Statistics, 35:1012-1030, 2007.
[4] J. Giesen, J. Mueller, S. Laue, and S. Swiercy. Approximating Concavely Parameterized Optimization Problems. In Advances in Neural Information Processing Systems, 2012.
[5] J. Giesen, M. Jaggi, and S. Laue. Approximating Parameterized Convex Optimization Problems. ACM Transactions on Algorithms, 9, 2012.
[6] J. Giesen, S. Laue, and Wieschollek P. Robust and Efficient Kernel Hyperparameter Paths with Guarantees. In International Conference on Machine Learning, 2014.
[7] J. Mairal and B. Yu. Complexity analysis of the Lasso reguralization path. In International Conference on Machine Learning, 2012.
[8] V. Vapnik and O. Chapelle. Bounds on Error Expectation for Support Vector Machines. Neural Computation, 12:2013-2036, 2000.
[9] T. Joachims. Estimating the generalization performance of a SVM efficiently. In International Conference on Machine Learning, 2000.
[10] K. Chung, W. Kao, C. Sun, L. Wang, and C. Lin. Radius margin bounds for support vector machines with the RBF kernel. Neural computation, 2003.
[11] M. Lee, S. Keerthi, C. Ong, and D. DeCoste. An efficient method for computing leave-one-out error in support vector machines with Gaussian kernels. IEEE Transactions on Neural Networks, 15:750-7, 2004.
[12] L. El Ghaoui, V. Viallon, and T. Rabbani. Safe feature elimination in sparse supervised learning. Pacific Journal of Optimization, 2012.
[13] Z. Xiang, H. Xu, and P. Ramadge. Learning sparse representations of high dimensional data on large scale dictionaries. In Advances in Neural Information Processing Sysrtems, 2011.
[14] K. Ogawa, Y. Suzuki, and I. Takeuchi. Safe screening of non-support vectors in pathwise SVM computation. In International Conference on Machine Learning, 2013.
[15] J. Liu, Z. Zhao, J. Wang, and J. Ye. Safe Screening with Variational Inequalities and Its Application to Lasso. In International Conference on Machine Learning, volume 32, 2014.
[16] J. Wang, J. Zhou, J. Liu, P. Wonka, and J. Ye. A Safe Screening Rule for Sparse Logistic Regression. In Advances in Neural Information Processing Sysrtems, 2014.
[17] V. Vapnik. The Nature of Statistical Learning Theory. Springer, 1996. [18] S. Shalev-Shwartz and S. Ben-David. Understanding machine learning. Cambridge University Press,
2014. [19] J. Snoek, H. Larochelle, and R. Adams. Practical Bayesian Optimization of Machine Learning Algo-
rithms. In Advances in Neural Information Processing Sysrtems, 2012. [20] J. Bergstra and Y. Bengio. Random Search for Hyper-Parameter Optimization. Journal of Machine
Learning Research, 13:281-305, 2012. [21] O. Chapelle, V. Vapnik, O. Bousquet, and S. Mukherjee. Choosing multiple parameters for support vector
machines. Machine Learning, 46:131-159, 2002. [22] P D. Bertsekas. Nonlinear Programming. Athena Scientific, 1999. [23] C. Chang and C. Lin. LIBSVM : A Library for Support Vector Machines. ACM Transactions on Intelligent
Systems and Technology, 2:1-39, 2011. [24] O. Chapelle. Training a support vector machine in the primal. Neural computation, 19:1155-1178, 2007. [25] C. Lin, R. Weng, and S. Keerthi. Trust Region Newton Method for Large-Scale Logistic Regression. The
Journal of Machine Learning Research, 9:627-650, 2008. [26] R. Fan, K. Chang, and C. Hsieh. LIBLINEAR: A library for large linear classification. The Journal of
Machine Learning, 9:1871-1874, 2008.
9

